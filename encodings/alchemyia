#show place/5.
height(0..7).
width(0..8).

placed(I, J) :- placedRune(I, J, _, _, _).

adiacente(I1, J, I2, J) :- height(I1), width(J), height(I2), I2 = I1+1.
adiacente(I, J1, I, J2) :- height(I), width(J1), width(J2), J2 = J1+1.
adiacente(I1, J, I2, J) :- height(I1), width(J), height(I2), I2 = I1-1.
adiacente(I, J1, I, J2) :- height(I), width(J1), width(J2), J2 = J1-1.

place(I, J, S, C, T) | noPlace(I, J, S, C, T) :- height(I), width(J), rune(S, C, T), not placed(I, J).

%Esclude che la stessa runa sia in piu' posizioni.
:- #count{I, J : place(I,J,_,_,_)} > 1.

%Esclude due rune incompatibili vicine.
:- place(I1, J1, S1, C1, normal), placedRune(I2, J2, S2, C2, normal), adiacente(I1, J1, I2, J2), S1 != S2, C1 != C2.

%Esclude che una runa che si sta piazzando non abbia confinanti.
runevicine :- place(I1, J1, _, _, normal), placed(I2, J2), adiacente(I1, J1, I2, J2).
runevicine :- place(_, _, _, _, stone).
:- not runevicine.

countColor(X) :- place(I, J, _, _, _), X = #count{C : placedRune(IP, JP, S, C, normal), adiacente(I, J, IP, JP)}.
countShape(X) :- place(I, J, _, _, _), X = #count{S : placedRune(IP, JP, S, C, normal), adiacente(I, J, IP, JP)}.
countRune(X) :- place(I, J, _, _, _), X = #count{IP,JP : placedRune(IP, JP, S, C, normal), adiacente(I, J, IP, JP)}.
sameColor(X) :- place(I, J, _, _, _), placedRune(I2, J2, _, C, normal), adiacente(I, J, I2, J2), X = #count{IP, JP : placedRune(IP, JP, _, C, normal), adiacente(I, J, IP, JP)}.
sameShape(X) :- place(I, J, _, _, _), placedRune(I2, J2, S, _, normal), adiacente(I, J, I2, J2), X = #count{IP, JP : placedRune(IP, JP, S, _, normal), adiacente(I, J, IP, JP)}.

%Se l'indice di combinazioni attorno ad una posizione è minore di 6 è sempre piazzabile.
free :- place(I, J, _, _, _), countColor(X), countShape(Y), X+Y < 6.

%Se l'indice di combinazioni attorno ad una posizione è uguale a 6 è piazzabile in alcuni casi.
free :- place(I, J, _, _, _), sameColor(C), C = 3.
free :- place(I, J, _, _, _), sameShape(S), S = 3.