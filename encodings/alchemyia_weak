% Preferisce la pulizia di riga/colonna (solo in alcuni casi).
:~ place(I, J, _, _, normal), X = #count{W : placed(I, W)}, Y = #count{Q : placed(Q, J)}, X > 6, Y > 5. [15-(X+Y)@16]

% Preferire match per colore/forma tra più rune.
:~ place(I1, J1, _, _, normal), X = #count{S : placedRune(I2, J2, S, _, normal), adiacente(I1, J1, I2, J2)}, Y = #count{C : placedRune(I2, J2, _, C, normal), adiacente(I1, J1, I2, J2)}. [30-(X+Y)@15]
:~ place(I1, J1, _, _, stone), X = #count{S : placedRune(I2, J2, S, _, normal), adiacente(I1, J1, I2, J2)}, Y = #count{C : placedRune(I2, J2, _, C, normal), adiacente(I1, J1, I2, J2)}. [30-(X+Y)@15]

% Gestire che se sono presenti situazioni risolvibili da una runa normale non mettere la stone.

% Le stone devono stare più lontane.
:~ place(I1, J1, _, _, _), adiacente(I1, J1, I2, J2),  adiacente(I2, J2, I3, J3), placedRune(I3, J3, _, _, stone). [1@13]

% Qualsiasi rune lontana dalla stone.
:~ place(I1, J1, _, _, _), adiacente(I1, J1, I2, J2), placedRune(I2, J2, _, _, stone). [1@10]

% Preferisce il match per colore
:~ place(I1, J1, _, C1, normal), adiacente(I1, J1, I2, J2), placedRune(I2, J2, _, C2, normal), C1 != C2. [1@8]

% Preferisce posizionare su celle mai occupate.
:~ cleared(I, J), place(I, J, _, _, _). [1@7]

% Preferisce piazzare una runa anziche' buttarla.
ins :- place(_, _, _, _, _).
:~ not ins, trash(X). [1@6+(X*2)]

% Preferisce mettere la pietra al centro.
diffrow(X) :- place(I, _, _, _, stone), I > 3, X = I-3.
diffrow(X) :- place(I, _, _, _, stone), I < 4, X = 4-I.
diffcol(X) :- place(_, J, _, _, stone), J > 3, X = J-3.
diffcol(X) :- place(_, J, _, _, stone), J < 4, X = 4-J.
:~ diffrow(X), diffcol(Y). [X+Y@5]

% Da un costo a tutti gli AS.
:~ rune(S, C, T). [0@1]